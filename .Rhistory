N^n
N = 20
n = 7
choose(N, n)
N^n
combn(populacija, 2)
populacija = 1:4
vr_obelezja = c(7, 2, 2, 6)
N = length(populacija)
combn(populacija, 2)
for (i in 1:N) {
for (j in 1:N) {
if (i < j) {
uzorci[[s]] = c(i, j)
s = s + 1
}
}
}
uzorci = list()
vr_obelezja_na_uzorku = list()
s = 1
for (i in 1:N) {
for (j in 1:N) {
if (i < j) {
uzorci[[s]] = c(i, j)
s = s + 1
}
}
}
uzorci
populacija = 1:4
vr_obelezja = c(7, 2, 2, 6)
N = length(populacija)
combn(populacija, 2)
uzorci = list()
vr_obelezja_na_uzorku = list()
s = 1
for (i in 1:N) {
for (j in 1:N) {
if (i < j) {
uzorci[[s]] = c(i, j)
s = s + 1
}
}
}
uzorci
dirVec = factor(direction)
direction = c("up", "down", "left", "right")
dirVec = factor(direction)
dirVec
levels(x=dirVec)
dow = 1:7
factor(1;7)
factor(1:7)
FC = factor(1:7)
WD = c(2, 4, 1)
FC = (1:7)
WD = c(2, 4, 1)
wdFact = factor(x=WD, levels = FC, ordered = T)
wdFact
custData = data.frame(name = c('Tom', 'Sally', 'Sue'),
age = c(42, 12, 30),
stringsAsFactors = F)
custData
custData(1,1)
custData[1, 1]
populacija = 1:4
vr_obelezja_na_populaciji = c(7,2,2,6)
N = length(populacija)
uzorci = list()
vr_obelezja_na_uzorku = list()
s = 1
for(i in 1:N) {
for(j in 1:N) {
if(i<j) {
uzorci[[s]] = c(i,j)
vr_obelezja_na_uzorku[[s]] = c(vr_obelezja_na_populaciji[i], vr_obelezja_na_populaciji[j])
s = s+1
}
}
}
length(uzorci)
uzorci
?combn
combn(populacija)
combn(populacija, 2)
combn(populacija, 2, simplify = F)
vr_obelezja_na_uzorku = combn(populacija, 2, simplify = F)
vr_obelezja_na_uzorku
vr_obelezja_na_uzorku = combn(vr_obelezja_na_populaciji, 2, simplify = F)
vr_obelezja_na_uzorku
t.kapa = N * mean(vr_obelezja_na_uzorku)
vr_obelezja_na_uzorku
lapply(vr_obelezja_na_uzorku, mean)
sapply(vr_obelezja_na_uzorku, mean)
t.kapa = N * sapply(vr_obelezja_na_uzorku, mean)
t.kapa
p.uzorka = function(i, j) {
if (i == 1 && j == 2) {
return(1/3)
} else if (i == 1 && j == 3) {
return(1/2)
} else if (i == 2 && j == 3) {
return(1/6)
} else {
return(1/6)
}
}
p.uzorka(1, 3)
p.uzorka = function(i, j) {
if (i == 1 && j == 2) {
return(1/3)
} else if (i == 1 && j == 3) {
return(1/2)
} else if (i == 2 && j == 3) {
return(1/6)
} else {
return(0)
}
}
pt.kapa = sapply(uzorci, function(elem) {
return(p.uzorka(elem[1], elem[2]))
})
pt.kapa
E.t.ocene = sum(pt.kapa * t.kapa)
E.t.ocene
t.kapa
pt.kapa
E.t.ocene
sum(vr_obelezja_na_populaciji)
populacija = 1:4
# obelezje: redni broj jedinke
N = length(populacija)
n1 = 2
n2 = 3
uzorci.obima.2 = combn(populacija, 2, simplify = F)
uzorci.obima.2
t.ocena = function(uzorak) {
N * mean(uzorak)
}
t.ocene.2 = sapply(uzorci.obima.2, t.ocena)
t.ocene.2
E.t.ocene = sum(t.ocene.2 * 1 / choose(N, 2))
E.t.ocene
t = sum(populacija)
t.ocene.2 - t
(t.ocene.2 - t)^2
sum((t.ocene.2 - t)^2 * 1 / choose(N, 2))
MSE.2 = sum((t.ocene.2 - t)^2 * 1 / choose(N, 2))
populacija = 1:8
N = length(populacija)
n = 2
p.uzorka = function(elem) {
if (elem[1]%%2 != 0 || elem[2]%%2 != 0) {
return(0)
} else if (elem[1] == 2) {
return(1/elem[2])
} else if (elem[1] == 4) {
return(1/8)
} else if (elem[1] == 6 && elem[2] == 8) {
return(10/48)
} else {
return(0)
}
}
uzorci = combn(populacija, 2, simplify = F)
uzorci
xn = sapply(uzorci, p.uzorka)
xn
xn = sapply(uzorci, mean)
xn
p.xn = sapply(uzorci, p.uzorka)
p.xn
E.xn = sum(p.xn * xn)
E.xn
mean(populacija)
MSE.xn = sum((xn - mean(populacija))^2 * p.xn)
MSE.xn
populacija = 1:100
k = 15
n = 20
populacija = 1:100
k = 15
n = 20
replicate(10, 1)
replicate(10, sample(), simplify = T)
replicate(10, sample(populacija, 2), simplify = T)
replicate(10, sample(populacija, 2), simplify = F)
replicate(10, sample(populacija, 2))
replicate(10, sample(populacija, 2), simplify = F)
replicate(10, sample(populacija, k), simplify = F)
replicate(10, sample(populacija, k, replace = F), simplify = F)
replicate(k, sample(populacija, n, replace = F), simplify = F)
uzorci = replicate(k, sample(populacija, n, replace = F), simplify = F)
uzorci
t.ocene = length(populacija) * sapply(uzorci, mean)
t.ocene
t = sum(populacija)
t
min(abs(t.ocene - t))
which.min(abs(t.ocene - t))
which.min(abs(t.ocene - t))
uzorci[[which.min(abs(t.ocene - t))]]
rm(list = ls())
expand.grid(list((c(1, 2, 4))), 2)
expand.grid(c(1, 2, 3), 2)
expand.grid(c(1, 2, 3), 2)
grid = expand.grid(c(1, 2, 3), 2)
grid = expand.grid(c(1, 2, 3))
grid
grid = expand.grid(c(1, 2, 3), 2)
grid
grid = expand.grid(c(1, 2, 3), 3)
grid
grid = expand.grid(list(1, 2, 3), 2)
grid
grid = expand.grid(list(c(1, 2, 3)), 2)
grid
rep(list(c(1, 2, 3)), 2)
expand.grid(rep(list(c(1, 2, 3)), 2))
getVariation = function(n) {
grid = expand.grid(rep(list(c(1, 2, 3)), n))
colnames(grid) = NULL
return(unname(split(grid, seq(nrow(grid)))))
}
getVariation(2)
getVariation(3)
getVariation = function(n, k) {
grid = expand.grid(rep(list(1:n), k))
colnames(grid) = NULL
return(unname(split(grid, seq(nrow(grid)))))
}
getVariation(3)
getVariation(3, 2)
getVariation(4, 2)
rm(list = ls())
setwd('./Documents/faks/IVgodina/utuz/seminarski/')
install.packages('dplyr')
library(dplyr)
nbaPlayers = read.table('./all_seasons.csv')
nbaPlayers
nbaPlayers = read.table('./all_seasons.csv')
nbaPlayers = read.csv('./all_seasons.csv')
nbaPlayers
filter(nbaPlayers, age > 30)
names(nbaPlayers)
?select
nbaPlayers$country
filter(nbaPlayers, country = "Serbia")
filter(nbaPlayers, country=Serbia)
filter(nbaPlayers, country==Serbia)
filter(nbaPlayers, country=='Serbia')
filter(nbaPlayers, country=='Serbia') %>% arrange(pts)
filter(nbaPlayers, country=='Serbia') %>% arrange(pts) %>% select(player_name, pts)
